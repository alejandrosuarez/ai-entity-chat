/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * System health check
     * @description Get system status and service health
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description System health information */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HealthResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/send-otp': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Send OTP
     * @description Send a one-time password to user's email for authentication
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['OTPRequest']
        }
      }
      responses: {
        /** @description OTP sent successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OTPResponse']
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/verify-otp': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Verify OTP & Login
     * @description Verify OTP code and receive a persistent authentication token
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['OTPVerifyRequest']
        }
      }
      responses: {
        /** @description OTP verified successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TokenResponse']
          }
        }
        /** @description Invalid OTP */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Current User
     * @description Get information about the currently authenticated user
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description User information */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserInfo']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Logout
     * @description Invalidate the current authentication token
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Logged out successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['LogoutResponse']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/entities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Entities
     * @description Get a paginated list of entities with optional filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          page?: number
          /** @description Items per page */
          limit?: number
          /** @description Filter by entity category */
          category?: string
          /** @description Filter by tenant ID */
          tenant?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of entities */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EntityList']
          }
        }
      }
    }
    put?: never
    /**
     * Create Entity
     * @description Create a new entity (requires authentication)
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EntityCreate']
        }
      }
      responses: {
        /** @description Entity created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Entity']
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/entities/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Entity by ID
     * @description Retrieve a specific entity by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Entity ID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Entity details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Entity']
          }
        }
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    /**
     * Delete Entity
     * @description Soft delete an entity (requires authentication and ownership)
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Entity ID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Entity deleted successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    /**
     * Update Entity
     * @description Update an existing entity (requires authentication and ownership)
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Entity ID */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EntityUpdate']
        }
      }
      responses: {
        /** @description Entity updated successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Entity']
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    trace?: never
  }
  '/api/entities/{id}/images': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Entity Images
     * @description Retrieve all images for a specific entity
     */
    get: {
      parameters: {
        query?: {
          /** @description Image size to return */
          size?: 'thumbnail' | 'small' | 'medium' | 'large'
        }
        header?: never
        path: {
          /** @description Entity ID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Entity images */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EntityImages']
          }
        }
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /**
     * Upload Images to Entity
     * @description Upload and automatically optimize images for an entity. Only entity owners can upload images.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Entity ID */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description Image files (jpg, png, webp, max 5MB) */
            files?: string[]
            /** @description Optional label for the image */
            label?: string
            /** @description Whether this is a fallback image */
            is_fallback?: boolean
          }
        }
      }
      responses: {
        /** @description Images uploaded successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ImageUploadResponse']
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Forbidden - not entity owner */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/images/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete Image
     * @description Remove an image and all its optimized versions. Only the user who uploaded the image can delete it.
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Image ID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Image deleted successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Forbidden - not image owner */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Image not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/entities/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Advanced Entity Search
     * @description Search entities with enhanced filtering, sorting, and optional image inclusion
     */
    get: {
      parameters: {
        query?: {
          /** @description Search query text */
          q?: string
          /** @description Filter by entity category/type */
          category?: string
          /** @description Page number */
          page?: number
          /** @description Items per page */
          limit?: number
          /** @description Sort field */
          sort_by?: string
          /** @description Sort order */
          sort_order?: 'asc' | 'desc'
          /** @description Include image thumbnails */
          include_images?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Search results */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EntityList']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Available Categories
     * @description List all available entity categories
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of categories */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CategoryList']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/categories/{category}/entities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Entities by Category
     * @description Get all entities in a specific category with optional images
     */
    get: {
      parameters: {
        query?: {
          /** @description Include image thumbnails */
          include_images?: boolean
          /** @description Page number */
          page?: number
          /** @description Items per page */
          limit?: number
        }
        header?: never
        path: {
          /** @description Category name */
          category: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of entities in category */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EntityList']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/my/entities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get My Entities
     * @description Get entities owned by the authenticated user
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          page?: number
          /** @description Items per page */
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of user's entities */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EntityList']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/shared/{shareToken}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Shared Entity
     * @description Access a publicly shared entity using its share token
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Entity share token */
          shareToken: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Shared entity details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Entity']
          }
        }
        /** @description Entity not found or not shareable */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/subscribe-device': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Subscribe Device
     * @description Subscribe a device for push notifications (supports both anonymous and authenticated users)
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['DeviceSubscription']
        }
      }
      responses: {
        /** @description Device subscribed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                device_token?: string
                user_id?: string
                tenant_context?: string
                is_active?: boolean
                /** Format: date-time */
                created_at?: string
              }
              action?: string
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/merge-device': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Merge Device Subscription
     * @description Merge anonymous device subscription when user logs in
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description OneSignal player ID */
            deviceToken: string
          }
        }
      }
      responses: {
        /** @description Device subscription merged successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              merged?: boolean
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/send': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Send Notification
     * @description Send any type of notification to a user
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationSend']
        }
      }
      responses: {
        /** @description Notification sent successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                user_id?: string
                event_type?: string
                message?: string
                link?: string
                /** Format: date-time */
                timestamp?: string
              }
              pushSent?: boolean
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/chat-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Chat Request Notification
     * @description Specialized endpoint for chat requests to entity owners
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ChatRequest']
        }
      }
      responses: {
        /** @description Chat request notification sent successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                user_id?: string
                event_type?: string
                message?: string
                link?: string
              }
              pushSent?: boolean
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/preferences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Notification Preferences
     * @description Get user's notification preferences
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description User notification preferences */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              preferences?: {
                chat_requests?: boolean
                attribute_updates?: boolean
                reminders?: boolean
                marketing?: boolean
              }
              userId?: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /**
     * Update Notification Preferences
     * @description Update user's notification preferences
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationPreferences']
        }
      }
      responses: {
        /** @description Preferences updated successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                user_id?: string
                preferences?: {
                  chat_requests?: boolean
                  attribute_updates?: boolean
                  reminders?: boolean
                  marketing?: boolean
                }
              }
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Notification History
     * @description Get user's notification history with pagination
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          page?: number
          /** @description Items per page */
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Notification history */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              notifications?: {
                id?: string
                event_type?: string
                message?: string
                link?: string
                event_payload?: Record<string, never>
                seen?: boolean
                /** Format: date-time */
                timestamp?: string
              }[]
              pagination?: {
                page?: number
                limit?: number
                total?: number
                has_more?: boolean
              }
              userId?: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/{id}/seen': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Mark Notification as Seen
     * @description Mark a specific notification as seen
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Notification ID */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Notification marked as seen */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                seen?: boolean
                /** Format: date-time */
                updated_at?: string
              }
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
        /** @description Notification not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/notifications/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test Notification
     * @description Send a test notification to the authenticated user
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Test notification sent successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              data?: {
                id?: string
                event_type?: string
                message?: string
                /** Format: date-time */
                timestamp?: string
              }
              pushSent?: boolean
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/interaction_logs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Log Interaction
     * @description Manually log an interaction event
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['InteractionLog']
        }
      }
      responses: {
        /** @description Interaction logged successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success?: boolean
              message?: string
              /** Format: date-time */
              logged_at?: string
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Error: {
      /** @description Error message */
      error?: string
    }
    OTPRequest: {
      /**
       * Format: email
       * @description User email address
       */
      email: string
      /**
       * @description Tenant identifier
       * @default default
       */
      tenantId: string
    }
    OTPVerifyRequest: {
      /**
       * Format: email
       * @description User email address
       */
      email: string
      /** @description One-time password code */
      otp: string
      /**
       * @description Tenant identifier
       * @default default
       */
      tenantId: string
    }
    OTPResponse: {
      success?: boolean
      message?: string
      /** Format: date-time */
      expiresAt?: string
    }
    TokenResponse: {
      success?: boolean
      message?: string
      user?: {
        email?: string
        tenantId?: string
      }
      token?: string
      tokenType?: string
      /** Format: date-time */
      timestamp?: string
    }
    UserInfo: {
      user?: {
        id?: string
        email?: string
        tenant?: string
        metadata?: Record<string, never>
      }
      authenticated?: boolean
      tokenType?: string
    }
    LogoutResponse: {
      success?: boolean
      message?: string
    }
    EntityCreate: {
      /** @description Entity name */
      name: string
      /** @description Entity category/type */
      category: string
      /** @description Entity description */
      description?: string
      /** @description Custom entity attributes */
      attributes?: {
        [key: string]: unknown
      }
      /**
       * @description Whether entity can be shared publicly
       * @default true
       */
      public_shareable: boolean
    }
    EntityUpdate: {
      /** @description Entity name */
      name?: string
      /** @description Entity description */
      description?: string
      /** @description Custom entity attributes */
      attributes?: {
        [key: string]: unknown
      }
      /** @description Whether entity can be shared publicly */
      public_shareable?: boolean
    }
    Entity: {
      /** Format: uuid */
      id?: string
      entity_type?: string
      tenant_id?: string
      owner_id?: string
      attributes?: {
        [key: string]: unknown
      }
      share_token?: string
      public_shareable?: boolean
      disabled?: boolean
      /** Format: date-time */
      created_at?: string
      /** Format: date-time */
      updated_at?: string
    }
    EntityList: {
      entities?: components['schemas']['Entity'][]
      pagination?: {
        page?: number
        limit?: number
        total?: number
        has_more?: boolean
      }
      filters_applied?: {
        [key: string]: unknown
      }
    }
    ImageUploadResponse: {
      success?: boolean
      message?: string
      images?: {
        /** Format: uuid */
        id?: string
        urls?: {
          thumbnail?: {
            url?: string
            path?: string
            size?: number
          }
          small?: {
            url?: string
            path?: string
            size?: number
          }
          medium?: {
            url?: string
            path?: string
            size?: number
          }
          large?: {
            url?: string
            path?: string
            size?: number
          }
        }
        metadata?: {
          originalName?: string
          label?: string
          entityId?: string
          tenantId?: string
          uploadedBy?: string
          /** Format: date-time */
          createdAt?: string
        }
      }[]
    }
    EntityImages: {
      /** Format: uuid */
      entityId?: string
      images?: {
        id?: string
        originalName?: string
        label?: string
        url?: string
        availableSizes?: string[]
        urls?: {
          [key: string]: unknown
        }
        uploadedBy?: string
        /** Format: date-time */
        createdAt?: string
      }[]
      requestedSize?: string
      totalImages?: number
    }
    CategoryList: {
      categories?: {
        id?: string
        name?: string
        display_name?: string
        description?: string
        base_schema?: Record<string, never>
        active?: boolean
        /** Format: date-time */
        created_at?: string
      }[]
      total?: number
    }
    HealthResponse: {
      status?: string
      /** Format: date-time */
      timestamp?: string
      version?: string
      environment?: string
      services?: {
        database?: string
        auth?: string
        notifications?: string
        images?: string
      }
    }
    DeviceSubscription: {
      /** @description OneSignal player ID */
      deviceToken: string
      /**
       * @description Tenant identifier
       * @default default
       */
      tenantContext: string
    }
    NotificationSend: {
      /** @description User ID to send notification to */
      userId: string
      /** @description Type of notification event */
      eventType: string
      /** @description Notification message */
      message: string
      /** @description Optional URL to include in notification */
      link?: string
      /**
       * @description Tenant identifier
       * @default default
       */
      tenantContext: string
      /** @description Additional data for the notification */
      eventPayload?: {
        [key: string]: unknown
      }
    }
    ChatRequest: {
      /** @description Entity ID to send chat request about */
      entityId: string
      /** @description URL for the chat interface */
      chatUrl: string
    }
    NotificationPreferences: {
      preferences: {
        chat_requests?: boolean
        attribute_updates?: boolean
        reminders?: boolean
        marketing?: boolean
      }
    }
    InteractionLog: {
      /** @description Type of event to log */
      eventType: string
      /** @description Related entity ID */
      entityId?: string
      /** @description Additional event data */
      eventPayload?: {
        [key: string]: unknown
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
